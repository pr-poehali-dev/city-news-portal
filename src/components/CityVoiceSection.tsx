import { useEffect, useState, useMemo } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';

interface Message {
  id: string;
  type: 'user' | 'city';
  text: string;
  timestamp: Date;
}

interface CityPost {
  id: number;
  text: string;
  mood: string;
  location: string;
  timestamp: string;
  author: string;
  type: string;
}

const FUNCTION_URL = 'https://functions.poehali.dev/d7440490-2756-4be6-9013-fc14e99c0a76';

const ALL_QUESTIONS = [
  '–ì–æ—Ä–æ–¥, –∫–∞–∫ —Ç—ã?', '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?', '–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?', '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ',
  '–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —É–ª–∏—Ü–∞—Ö?', '–ö–∞–∫ —Ç–≤–æ–∏ –∂–∏—Ç–µ–ª–∏?', '–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ?',
  '–ß—Ç–æ —Ä–∞–¥—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è?', '–ï—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?', '–û —á—ë–º –¥—É–º–∞–µ—à—å?', '–ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?',
  '–ö–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å?', '–ß–µ–º –≥–æ—Ä–¥–∏—à—å—Å—è?', '–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å?', '–í–∏–¥–µ–ª —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ?',
  '–ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã?', '–ß—Ç–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å?', '–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É –ø—Ä–æ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
  '–ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –ª—é–¥–∏?', '–ö–∞–∫–æ–µ —É —Ç–µ–±—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç –¥–Ω—è?', '–ß—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?',
  '–ö–∞–∫ –¥–µ–ª–∞ –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π?', '–ß—Ç–æ –≤ –ø–∞—Ä–∫–∞—Ö?', '–ö–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è?', '–ö–∞–∫ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º?',
  '–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —É–≤–∏–¥–µ–ª?', '–ö—É–¥–∞ —Å–æ–≤–µ—Ç—É–µ—à—å —Å—Ö–æ–¥–∏—Ç—å?', '–ö–∞–∫ –∂–∏–≤—ë—Ç—Å—è –∫—Ä–∞—Å–Ω–æ–¥–∞—Ä—Ü–∞–º?',
  '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?', '–ß–µ–º –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –∂–∏—Ç–µ–ª–∏?', '–ö–∞–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ?',
  '–ß—Ç–æ –Ω–∞ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π?', '–ö–∞–∫ –ø–æ–≥–æ–¥–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?', '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ä–∞–π–æ–Ω—ã',
  '–ß—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è?', '–ö–∞–∫–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –ª—é–±–∏—à—å?', '–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º?',
  '–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Ç—É—Ä–∏—Å—Ç–∞–º?', '–ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –º–µ—Å—Ç–Ω—ã–º?', '–ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–æ–ª–Ω—É—é—Ç?',
  '–ß–µ–º —Å–ª–∞–≤–∏—Ç—Å—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä?', '–ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≥–æ—Ä–æ–¥?', '–ß—Ç–æ –≤ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –∂–∏–∑–Ω–∏?',
  '–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ?', '–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ –±—É–¥—É—â–µ–º?', '–ö–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç?',
  '–ö–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞?', '–ß—Ç–æ –≤ —Å–ø–æ—Ä—Ç–µ?', '–ö–∞–∫–∞—è –∫—É—Ö–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∞?',
  '–ß—Ç–æ —Ç–≤–æ—Ä–∏—Ç—Å—è –Ω–∞ —Ä—ã–Ω–∫–∞—Ö?', '–ö–∞–∫ –∂–∏–≤—É—Ç –ø–∞—Ä–∫–∏?', '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏?',
  '–ö–∞–∫–∏–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è?', '–ö–∞–∫ –±–∏–∑–Ω–µ—Å?', '–ß—Ç–æ —Å —ç–∫–æ–ª–æ–≥–∏–µ–π?',
  '–ö–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è?', '–ö–∞–∫ —Å –∂–∏–ª—å—ë–º?', '–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ?',
  '–ö–∞–∫–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç?', '–ö–∞–∫ —Ç—É—Ä–∏–∑–º?', '–ß—Ç–æ –≤ –Ω–æ—á–Ω–æ–π –∂–∏–∑–Ω–∏?',
  '–ö–∞–∫–∏–µ –∫–∞—Ñ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã?', '–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫–∏?', '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ?',
  '–ö–∞–∫–∏–µ –º—É–∑–µ–∏ —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å?', '–ö–∞–∫ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è –∂–∏–∑–Ω—å?', '–ß—Ç–æ –≤ –º—É–∑—ã–∫–µ?',
  '–ö–∞–∫–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç?', '–ö–∞–∫ –º–æ–ª–æ–¥—ë–∂–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞?', '–ß—Ç–æ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö?',
  '–ö–∞–∫–∏–µ –≤—ã—Å—Ç–∞–≤–∫–∏ –∏–¥—É—Ç?', '–ö–∞–∫ –∫–∏–Ω–æ?', '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ?', '–ö–∞–∫–∏–µ –¢–¶ –ø–æ–ø—É–ª—è—Ä–Ω—ã?',
  '–ö–∞–∫ —Å –ø–∞—Ä–∫–æ–≤–∫–∞–º–∏?', '–ß—Ç–æ —Å–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏?', '–ö–∞–∫–∏–µ —à–∫–æ–ª—ã –≤—ã–¥–µ–ª—è—é—Ç—Å—è?',
  '–ö–∞–∫ –º–µ–¥–∏—Ü–∏–Ω–∞?', '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö?', '–ö–∞–∫–∏–µ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç?',
  '–ö–∞–∫ digital-–∂–∏–∑–Ω—å?', '–ß—Ç–æ —Å –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º?', '–ö–∞–∫–∏–µ —Å–∫–≤–µ—Ä—ã –æ–±–ª–∞–≥–æ—Ä–æ–¥–∏–ª–∏?',
  '–ö–∞–∫ –≤–µ–ª–æ–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞?', '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ?', '–ö–∞–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã —É–¥–æ–±–Ω—ã–µ?',
  '–ö–∞–∫ –∫–∞—Ä—à–µ—Ä–∏–Ω–≥?', '–ß—Ç–æ —Å —Ç–∞–∫—Å–∏?', '–ö–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã?', '–ö–∞–∫ –¥–æ—Å—Ç–∞–≤–∫–∞?',
  '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —Ä–∏—Ç–µ–π–ª–µ?', '–ö–∞–∫–∏–µ –±—Ä–µ–Ω–¥—ã –æ—Ç–∫—Ä—ã–ª–∏—Å—å?', '–ö–∞–∫ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é?',
  '–ß—Ç–æ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ?', '–ö–∞–∫–∏–µ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã?', '–ö–∞–∫ –ø–æ–º–æ–≥–∞—é—Ç –Ω—É–∂–¥–∞—é—â–∏–º—Å—è?',
  '–ß—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö?', '–ö–∞–∫ –¥–µ—Ç—Å–∫–∏–µ –ø–ª–æ—â–∞–¥–∫–∏?', '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –¥–ª—è —Å–µ–º–µ–π?',
  '–ö–∞–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–π?', '–ö–∞–∫ —à–∫–æ–ª—å–Ω—ã–µ –∫–∞–Ω–∏–∫—É–ª—ã?', '–ß—Ç–æ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤?',
  '–ö–∞–∫–∏–µ –∫—Ä—É–∂–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã?'
];

const UNIQUE_RESPONSES: Record<string, string[]> = {
  –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: [
    '–°–µ–≥–æ–¥–Ω—è –±–æ–¥—Ä–æ–µ! –ú–æ–∏ —É–ª–∏—Ü—ã –ø–æ–ª–Ω—ã –∂–∏–∑–Ω–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏ üåü',
    '–ù–µ–º–Ω–æ–≥–æ –∑–∞–¥—É–º—á–∏–≤–æ–µ... –†–∞–∑–º—ã—à–ª—è—é –æ —Ç–æ–º, –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –º–µ–Ω—è–µ—Ç—Å—è –º–∏—Ä –≤–æ–∫—Ä—É–≥ ü§î',
    '–í–æ–æ–¥—É—à–µ–≤–ª—ë–Ω–Ω–æ–µ! –°—Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç üéâ',
    '–°–ø–æ–∫–æ–π–Ω–æ–µ –∏ —É–º–∏—Ä–æ—Ç–≤–æ—Ä—ë–Ω–Ω–æ–µ, –∫–∞–∫ —é–∂–Ω—ã–π –≤–µ—á–µ—Ä üåÖ',
    '–ò–≥—Ä–∏–≤–æ–µ! –•–æ—á–µ—Ç—Å—è —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è —Å–æ–ª–Ω—Ü—É –∏ —Ç–µ–ø–ª—É ‚òÄÔ∏è'
  ],
  –Ω–æ–≤–æ—Å—Ç–∏: [
    '–ù–∞ –ö—Ä–∞—Å–Ω–æ–π —É–ª–∏—Ü–µ —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –æ–∂–∏–≤–ª—ë–Ω–Ω–æ ‚Äî –ª—é–¥–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—é—Ç—Å—è –ø–æ–≥–æ–¥–æ–π! üö∂',
    '–í –ø–∞—Ä–∫–µ –ì–∞–ª–∏—Ü–∫–æ–≥–æ –º–æ–ª–æ–¥—ë–∂—å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∏–∫–Ω–∏–∫–∏. –ö—Ä–∞—Å–æ—Ç–∞! üå≥',
    '–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è –ø–æ–ª–Ω–∞ –ª—é–¥–µ–π ‚Äî –∫—Ç–æ-—Ç–æ –≥—É–ª—è–µ—Ç, –∫—Ç–æ-—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–µ—Ç—Å—è üì∏',
    '–ù–∞ —Ä—ã–Ω–∫–∞—Ö —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω—ã–π –∞–∂–∏–æ—Ç–∞–∂ ‚Äî —Å–µ–∑–æ–Ω –∞—Ä–±—É–∑–æ–≤ –≤ —Ä–∞–∑–≥–∞—Ä–µ! üçâ',
    '–ú–æ–∏ –∂–∏—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –≤—ã—Ö–æ–¥–Ω—ã–º ‚Äî –ø–ª–∞–Ω–∏—Ä—É—é—Ç –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –º–æ—Ä–µ üèñÔ∏è'
  ],
  –∂–∏—Ç–µ–ª–∏: [
    '–ú–æ–∏ –∫—Ä–∞—Å–Ω–æ–¥–∞—Ä—Ü—ã, –∫–∞–∫ –≤—Å–µ–≥–¥–∞, –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º–Ω—ã–µ –∏ –¥—É—à–µ–≤–Ω—ã–µ! –ì–æ—Ä–∂—É—Å—å –∏–º–∏ ‚ù§Ô∏è',
    '–ù–∞–±–ª—é–¥–∞—é, –∫–∞–∫ –ª—é–¥–∏ —Å–ø–µ—à–∞—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É —É—Ç—Ä–æ–º –∏ –Ω–µ—Å–ø–µ—à–Ω–æ –≥—É–ª—è—é—Ç –≤–µ—á–µ—Ä–æ–º üö∂',
    '–ñ–∏—Ç–µ–ª–∏ —Ä–∞–¥—É—é—Ç —Å–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π ‚Äî —Å—Ç–æ–ª—å–∫–æ –∏–¥–µ–π, –ø–ª–∞–Ω–æ–≤, –ø—Ä–æ–µ–∫—Ç–æ–≤! üí°',
    '–ú–µ—Å—Ç–Ω—ã–µ –∑–Ω–∞—é—Ç —Ç–æ–ª–∫ –≤ —Ö–æ—Ä–æ—à–µ–π –µ–¥–µ –∏ –¥—É—à–µ–≤–Ω—ã—Ö –ø–æ—Å–∏–¥–µ–ª–∫–∞—Ö üçΩÔ∏è',
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Ü—ã —É–º–µ—é—Ç –∏ —Ä–∞–±–æ—Ç–∞—Ç—å, –∏ –æ—Ç–¥—ã—Ö–∞—Ç—å –æ—Ç –¥—É—à–∏! üéä'
  ],
  —à—É—Ç–∫–∏: [
    '–£ –Ω–∞—Å –¥–≤–µ –±–µ–¥—ã: –¥–æ—Ä–æ–≥–∏ –∏ –¥–æ—Ä–æ–≥–∏. –û–¥–Ω–∏ —Ä–∞–∑–±–∏—Ç—ã–µ, –¥—Ä—É–≥–∏–µ –≤ —Ä–µ–º–æ–Ω—Ç–µ! üòÑ',
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Ü—ã –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞—é—Ç ‚Äî –æ–Ω–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ø—Ä–æ–±–∫—É. –≠—Ç–æ —Ä–∞–∑–Ω—ã–µ –≤–µ—â–∏! üöó',
    '–ü–æ–≥–æ–¥–∞: —É—Ç—Ä–æ–º +5, –¥–Ω—ë–º +25, –≤–µ—á–µ—Ä–æ–º –¥–æ–∂–¥—å. –û–¥–µ–≤–∞–π—Å—è —Å–ª–æ—è–º–∏! üå¶Ô∏è',
    '–ú–µ—Ç—Ä–æ? –ù–µ—Ç, –Ω–µ —Å–ª—ã—à–∞–ª–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –ö—Ä–∞—Å–Ω–∞—è —É–ª–∏—Ü–∞! üöá',
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä: –≥–¥–µ –∞—Ä–±—É–∑—ã –¥–µ—à–µ–≤–ª–µ –ø—Ä–æ–µ–∑–¥–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∫–µ! üçâ',
    '–ì–ª–∞–≤–Ω–∞—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å? –ü—Ä–æ–±–∫–∞ –Ω–∞ –¢—É—Ä–≥–µ–Ω–µ–≤—Å–∫–æ–º –º–æ—Å—Ç—É! üòÖ',
    '–¢—Ä–∏ —Å–µ–∑–æ–Ω–∞: –∂–∞—Ä–∞, –¥–æ–∂–¥—å, –æ–ø—è—Ç—å –∂–∞—Ä–∞ üå°Ô∏è',
    '–î–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –∫—Ç–æ —Å –º–æ—Ä—è, –∏ –∫—Ç–æ –µ–¥–µ—Ç –Ω–∞ –º–æ—Ä–µ üèñÔ∏è',
    '"–ó–∞—Ö–æ–¥–∏, —á–∞–π-–∫–æ—Ñ–µ-–±–æ—Ä—â-–ø–∏—Ä–æ–∂–∫–∏-–∫–æ–º–ø–æ—Ç-–µ—â—ë –ø–æ–µ—à—å!" ‚Äî –≤–æ—Ç —ç—Ç–æ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ! ‚òï',
    '–ù–µ "–ø–æ–π–¥—É –≤ —Ü–µ–Ω—Ç—Ä", –∞ "–≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π" üé≠'
  ],
  —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: [
    '–°–æ–≤–µ—Ç—É—é –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è –ø–æ –ö—Ä–∞—Å–Ω–æ–π –≤–µ—á–µ—Ä–æ–º ‚Äî –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤–æ–ª—à–µ–±–Ω–∞—è! ‚ú®',
    '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–µ—Ç–∏ –ø–∞—Ä–∫ –ì–∞–ª–∏—Ü–∫–æ–≥–æ ‚Äî –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –≤ –†–æ—Å—Å–∏–∏ üèûÔ∏è',
    '–ü–æ–ø—Ä–æ–±—É–π —à–∞—É—Ä–º—É –Ω–∞ –†–∞—à–ø–∏–ª–µ–≤—Å–∫–æ–π ‚Äî –º–µ—Å—Ç–Ω—ã–π must-have! üåØ',
    '–°—Ö–æ–¥–∏ –Ω–∞ –Ω–∞–±–µ—Ä–µ–∂–Ω—É—é –ö—É–±–∞–Ω–∏ –Ω–∞ –∑–∞–∫–∞—Ç–µ ‚Äî –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ! üåÖ',
    '–ó–∞–≥–ª—è–Ω–∏ –Ω–∞ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ ‚Äî —Ç–∞–º –¥—É—Ö –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ üçÖ'
  ],
  –æ–±—â–µ–µ: [
    '–Ø –∂–∏–≤—É, –¥—ã—à—É, –Ω–∞–±–ª—é–¥–∞—é –∑–∞ —Å–≤–æ–∏–º–∏ —É–ª–∏—Ü–∞–º–∏ –∏ –ø–ª–æ—â–∞–¥—è–º–∏ üèôÔ∏è',
    '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ ‚Äî —Ç–æ —Å–æ–±—ã—Ç–∏–µ, —Ç–æ –≤—Å—Ç—Ä–µ—á—É üåÜ',
    '–ì–æ—Ä–∂—É—Å—å —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Å –æ–ø—Ç–∏–º–∏–∑–º–æ–º —Å–º–æ—Ç—Ä—é –≤ –±—É–¥—É—â–µ–µ üöÄ',
    '–ú–µ–Ω—è—é—Å—å –∏ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å, –Ω–æ –æ—Å—Ç–∞—é—Å—å —Ç—ë–ø–ª—ã–º —é–∂–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º ‚ù§Ô∏è',
    '–õ—é–±–ª—é –Ω–∞–±–ª—é–¥–∞—Ç—å, –∫–∞–∫ –º–æ–∏ –∂–∏—Ç–µ–ª–∏ —Å—Ç—Ä–æ—è—Ç —Å–≤–æ–∏ –º–µ—á—Ç—ã –∑–¥–µ—Å—å üí≠',
    '–£—Ç—Ä–æ–º –ø—Ä–æ—Å—ã–ø–∞—é—Å—å –ø–æ–¥ –ø–µ–Ω–∏–µ –ø—Ç–∏—Ü, –≤–µ—á–µ—Ä–æ–º –ª—é–±—É—é—Å—å –∑–∞–∫–∞—Ç–∞–º–∏ üåá',
    '–†–∞–¥ –∫–∞–∂–¥–æ–º—É, –∫—Ç–æ –ø—Ä–∏–µ–∑–∂–∞–µ—Ç –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π ü§ó',
    '–¶–µ–Ω—é –∏ –ø—Ä–æ—à–ª–æ–µ, –∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ ‚Äî –≤—Å—ë —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è —Å–æ–±–æ–π üèõÔ∏è'
  ]
};

const getRandomResponse = (category: string, usedResponses: Set<string>): string => {
  const responses = UNIQUE_RESPONSES[category] || UNIQUE_RESPONSES.–æ–±—â–µ–µ;
  const available = responses.filter(r => !usedResponses.has(r));
  const pool = available.length > 0 ? available : responses;
  return pool[Math.floor(Math.random() * pool.length)];
};

const generatePersonalizedAnswer = (question: string, posts: CityPost[], usedResponses: Set<string>): string => {
  const lowerQuestion = question.toLowerCase();
  
  if (lowerQuestion.includes('—à—É—Ç–∫') || lowerQuestion.includes('–ø–æ—Å–º–µ–π') || lowerQuestion.includes('—Ä–∞—Å—Å–º–µ—à–∏')) {
    return getRandomResponse('—à—É—Ç–∫–∏', usedResponses);
  }

  if (lowerQuestion.includes('–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ') || lowerQuestion.includes('–ø–æ–≥–æ–¥–∞') || lowerQuestion.includes('–¥—É—à')) {
    return getRandomResponse('–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', usedResponses);
  }

  if (lowerQuestion.includes('–Ω–æ–≤–æ–≥–æ') || lowerQuestion.includes('–Ω–æ–≤–æ—Å—Ç') || lowerQuestion.includes('–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç')) {
    if (posts.length > 0) {
      const recentPosts = posts.slice(-10);
      const randomPost = recentPosts[Math.floor(Math.random() * recentPosts.length)];
      return `${randomPost.text}\n\nüìç ${randomPost.location}`;
    }
    return getRandomResponse('–Ω–æ–≤–æ—Å—Ç–∏', usedResponses);
  }

  if (lowerQuestion.includes('–∂–∏—Ç–µ–ª') || lowerQuestion.includes('–ª—é–¥') || lowerQuestion.includes('–≥–æ–≤–æ—Ä—è—Ç')) {
    return getRandomResponse('–∂–∏—Ç–µ–ª–∏', usedResponses);
  }

  if (lowerQuestion.includes('—Ä–µ–∫–æ–º–µ–Ω–¥') || lowerQuestion.includes('–ø–æ—Å–æ–≤–µ—Ç') || lowerQuestion.includes('–∫—É–¥–∞')) {
    return getRandomResponse('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', usedResponses);
  }

  return getRandomResponse('–æ–±—â–µ–µ', usedResponses);
};

export const CityVoiceSection = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [loading, setLoading] = useState(false);
  const [cityPosts, setCityPosts] = useState<CityPost[]>([]);
  const [usedQuestions, setUsedQuestions] = useState<Set<string>>(new Set());
  const [usedResponses, setUsedResponses] = useState<Set<string>>(new Set());

  const displayedQuestions = useMemo(() => {
    const available = ALL_QUESTIONS.filter(q => !usedQuestions.has(q));
    const pool = available.length >= 6 ? available : ALL_QUESTIONS;
    const shuffled = [...pool].sort(() => Math.random() - 0.5);
    return shuffled.slice(0, 6);
  }, [usedQuestions]);

  useEffect(() => {
    const saved = localStorage.getItem('cityDialogHistory');
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        setMessages(parsed.map((m: any) => ({ ...m, timestamp: new Date(m.timestamp) })));
      } catch (e) {
        console.error('Error loading history:', e);
      }
    }
    
    const savedQuestions = localStorage.getItem('cityUsedQuestions');
    if (savedQuestions) {
      try {
        setUsedQuestions(new Set(JSON.parse(savedQuestions)));
      } catch (e) {
        console.error('Error loading used questions:', e);
      }
    }
    
    const savedResponses = localStorage.getItem('cityUsedResponses');
    if (savedResponses) {
      try {
        setUsedResponses(new Set(JSON.parse(savedResponses)));
      } catch (e) {
        console.error('Error loading used responses:', e);
      }
    }
    
    loadCityPosts();
  }, []);

  const loadCityPosts = async () => {
    try {
      const response = await fetch(FUNCTION_URL);
      if (response.ok) {
        const data = await response.json();
        const posts = Array.isArray(data) ? data : [data];
        setCityPosts(posts);
        
        if (messages.length === 0 && posts.length > 0) {
          const latestPost = posts[posts.length - 1];
          const initialMessage: Message = {
            id: Date.now().toString(),
            type: 'city',
            text: latestPost.text,
            timestamp: new Date()
          };
          setMessages([initialMessage]);
          localStorage.setItem('cityDialogHistory', JSON.stringify([initialMessage]));
        }
      }
    } catch (error) {
      console.error('Error loading city posts:', error);
    }
  };

  const askQuestion = async (question: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      text: question,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setLoading(true);

    const newUsedQuestions = new Set(usedQuestions);
    newUsedQuestions.add(question);
    setUsedQuestions(newUsedQuestions);
    localStorage.setItem('cityUsedQuestions', JSON.stringify([...newUsedQuestions]));

    await new Promise(resolve => setTimeout(resolve, 800));

    try {
      const answerText = generatePersonalizedAnswer(question, cityPosts, usedResponses);
      
      const newUsedResponses = new Set(usedResponses);
      newUsedResponses.add(answerText);
      setUsedResponses(newUsedResponses);
      localStorage.setItem('cityUsedResponses', JSON.stringify([...newUsedResponses]));

      const cityMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'city',
        text: answerText,
        timestamp: new Date()
      };

      setMessages(prev => {
        const updated = [...prev, cityMessage];
        localStorage.setItem('cityDialogHistory', JSON.stringify(updated));
        return updated;
      });
    } catch (error) {
      console.error('Error asking question:', error);
    } finally {
      setLoading(false);
    }
  };

  const clearHistory = () => {
    setMessages([]);
    setUsedQuestions(new Set());
    setUsedResponses(new Set());
    localStorage.removeItem('cityDialogHistory');
    localStorage.removeItem('cityUsedQuestions');
    localStorage.removeItem('cityUsedResponses');
    loadCityPosts();
  };

  return (
    <div className="my-12">
      <Card className="overflow-hidden border-2">
        <div className="bg-gradient-to-r from-primary/10 to-primary/5 p-6 border-b">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-3 rounded-full bg-primary/20">
                <Icon name="MessageCircle" className="text-primary" size={28} />
              </div>
              <div>
                <h2 className="text-2xl font-bold">–ü–æ–≥–æ–≤–æ—Ä–∏ —Å –≥–æ—Ä–æ–¥–æ–º</h2>
                <p className="text-sm text-muted-foreground flex items-center gap-1">
                  <span className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></span>
                  AI –æ—Ç–≤–µ—á–∞–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
                </p>
              </div>
            </div>
            {messages.length > 0 && (
              <Button
                variant="ghost"
                size="sm"
                onClick={clearHistory}
                className="gap-2"
              >
                <Icon name="RotateCcw" size={16} />
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
            )}
          </div>
        </div>

        <div className="p-6 space-y-4 min-h-[300px] max-h-[500px] overflow-y-auto">
          {messages.length === 0 && !loading && (
            <div className="text-center py-12">
              <Icon name="MessageCircle" size={48} className="mx-auto mb-4 text-muted-foreground/50" />
              <p className="text-muted-foreground mb-2">–ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥ —Å –≥–æ—Ä–æ–¥–æ–º</p>
              <p className="text-sm text-muted-foreground">–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ</p>
            </div>
          )}

          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              {message.type === 'city' && (
                <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0">
                  <Icon name="Building2" className="text-primary" size={20} />
                </div>
              )}
              
              <div
                className={`max-w-[70%] rounded-2xl px-4 py-3 ${
                  message.type === 'user'
                    ? 'bg-primary text-primary-foreground rounded-br-none'
                    : 'bg-muted rounded-bl-none'
                }`}
              >
                <p className="text-sm leading-relaxed whitespace-pre-line">{message.text}</p>
                <span className="text-xs opacity-70 mt-1 block">
                  {message.timestamp.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </span>
              </div>

              {message.type === 'user' && (
                <div className="w-10 h-10 rounded-full bg-muted flex items-center justify-center flex-shrink-0">
                  <Icon name="User" size={20} />
                </div>
              )}
            </div>
          ))}

          {loading && (
            <div className="flex gap-3 justify-start">
              <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0">
                <Icon name="Building2" className="text-primary" size={20} />
              </div>
              <div className="bg-muted rounded-2xl rounded-bl-none px-4 py-3">
                <div className="flex gap-1">
                  <div className="w-2 h-2 bg-primary/40 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                  <div className="w-2 h-2 bg-primary/40 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                  <div className="w-2 h-2 bg-primary/40 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                </div>
              </div>
            </div>
          )}
        </div>

        <div className="p-4 border-t bg-muted/30">
          <div className="flex flex-wrap gap-2">
            {displayedQuestions.map((question, index) => (
              <Button
                key={index}
                variant="outline"
                size="sm"
                onClick={() => askQuestion(question)}
                disabled={loading}
                className="rounded-full gap-2 hover:bg-primary hover:text-primary-foreground transition-colors"
              >
                <Icon name="Send" size={14} />
                {question}
              </Button>
            ))}
          </div>
          <p className="text-xs text-muted-foreground mt-3 text-center">
            100 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–æ–≤—ã–º–∏
          </p>
        </div>

        <div className="px-6 py-4 bg-blue-500/5 border-t border-blue-500/20">
          <div className="flex items-start gap-2 text-sm">
            <Icon name="Info" size={16} className="text-blue-600 mt-0.5 flex-shrink-0" />
            <p className="text-muted-foreground">
              <strong className="text-foreground">–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</strong> –ì–æ—Ä–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –±–æ–ª—å—à–æ–π –±–∞–∑—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑! –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ç–≤–æ—ë–º –±—Ä–∞—É–∑–µ—Ä–µ.
            </p>
          </div>
        </div>
      </Card>
    </div>
  );
};